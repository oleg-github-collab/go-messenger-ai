name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway link ${{ secrets.RAILWAY_PROJECT_ID }}
          railway up --detach

      - name: Wait for deployment
        run: sleep 30

      - name: Check deployment health
        run: |
          curl -f https://go-messenger-production.up.railway.app/health || exit 1

  deploy-turn:
    name: Deploy TURN Server
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[turn]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Format Check
        working-directory: ./infrastructure/digitalocean
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: ./infrastructure/digitalocean
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infrastructure/digitalocean
        env:
          TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
          TF_VAR_ssh_key_fingerprint: ${{ secrets.DO_SSH_KEY_FINGERPRINT }}
          TF_VAR_turn_username: ${{ secrets.TURN_USERNAME }}
          TF_VAR_turn_password: ${{ secrets.TURN_PASSWORD }}
        run: terraform plan

      - name: Terraform Apply
        working-directory: ./infrastructure/digitalocean
        env:
          TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
          TF_VAR_ssh_key_fingerprint: ${{ secrets.DO_SSH_KEY_FINGERPRINT }}
          TF_VAR_turn_username: ${{ secrets.TURN_USERNAME }}
          TF_VAR_turn_password: ${{ secrets.TURN_PASSWORD }}
        run: terraform apply -auto-approve

      - name: Get TURN Server IP
        id: turn_ip
        working-directory: ./infrastructure/digitalocean
        run: |
          echo "ip=$(terraform output -raw turn_server_ip)" >> $GITHUB_OUTPUT

      - name: Update Railway Environment
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway link ${{ secrets.RAILWAY_PROJECT_ID }}
          railway variables set TURN_SERVER=turn:${{ steps.turn_ip.outputs.ip }}:3478
          railway variables set TURN_USERNAME=${{ secrets.TURN_USERNAME }}
          railway variables set TURN_PASSWORD=${{ secrets.TURN_PASSWORD }}

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-railway]
    if: always()
    steps:
      - name: Deployment Success
        if: needs.deploy-railway.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "URL: https://go-messenger-production.up.railway.app"

      - name: Deployment Failed
        if: needs.deploy-railway.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          exit 1
