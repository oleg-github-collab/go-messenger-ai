name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  APP_NAME: messenger
  DEPLOY_PATH: /opt/messenger
  SERVER_USER: root
  SERVER_HOST: 157.230.79.144

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Build Go binary for Linux
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o ${{ env.APP_NAME }} .
          chmod +x ${{ env.APP_NAME }}
          ls -lh ${{ env.APP_NAME }}

      - name: Create deployment package
        run: |
          mkdir -p deploy-package
          cp ${{ env.APP_NAME }} deploy-package/
          cp -r static deploy-package/
          tar -czf ${{ env.APP_NAME }}-deploy.tar.gz -C deploy-package .
          ls -lh ${{ env.APP_NAME }}-deploy.tar.gz

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Upload deployment package to server
        run: |
          scp -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            ${{ env.APP_NAME }}-deploy.tar.gz \
            ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/tmp/

      - name: Deploy on server
        run: |
          ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'ENDSSH'

          set -e

          echo "=== Stopping messenger service ==="
          systemctl stop messenger || true

          echo "=== Creating backup ==="
          BACKUP_DIR="/opt/messenger/backups/$(date +%Y%m%d_%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          if [ -f "${{ env.DEPLOY_PATH }}/app/${{ env.APP_NAME }}" ]; then
            cp -r ${{ env.DEPLOY_PATH }}/app/* "$BACKUP_DIR/" || true
            echo "Backup created at: $BACKUP_DIR"
          fi

          echo "=== Extracting new deployment ==="
          mkdir -p ${{ env.DEPLOY_PATH }}/app
          tar -xzf /tmp/${{ env.APP_NAME }}-deploy.tar.gz -C ${{ env.DEPLOY_PATH }}/app/
          chmod +x ${{ env.DEPLOY_PATH }}/app/${{ env.APP_NAME }}

          echo "=== Starting messenger service ==="
          systemctl start messenger

          echo "=== Cleaning up ==="
          rm -f /tmp/${{ env.APP_NAME }}-deploy.tar.gz

          echo "=== Deployment completed successfully ==="
          ENDSSH

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'ENDSSH'

          echo "=== Service Status ==="
          systemctl status messenger --no-pager || true

          echo ""
          echo "=== Checking process ==="
          ps aux | grep ${{ env.APP_NAME }} | grep -v grep || echo "Process not found"

          echo ""
          echo "=== Testing HTTP endpoint ==="
          sleep 3
          curl -f http://localhost:8080/login || echo "HTTP check failed"

          echo ""
          echo "=== Recent logs ==="
          journalctl -u messenger -n 20 --no-pager || true
          ENDSSH

      - name: Cleanup SSH key
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key

      - name: Deployment summary
        if: success()
        run: |
          echo "==================================="
          echo "✅ Deployment successful!"
          echo "Server: ${{ env.SERVER_HOST }}"
          echo "Application: ${{ env.APP_NAME }}"
          echo "Time: $(date)"
          echo "==================================="

      - name: Notify on failure
        if: failure()
        run: |
          echo "==================================="
          echo "❌ Deployment FAILED!"
          echo "Server: ${{ env.SERVER_HOST }}"
          echo "Time: $(date)"
          echo "Please check the logs above"
          echo "==================================="
